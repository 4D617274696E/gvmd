version: 2
jobs:
  build_sqlite_debug:
    docker:
      - image: greenbone/build-env-gvm-master-debian-stretch-gcc-sqlite
    steps:
      - run:
          working_directory: ~/gvm-libs
          name: Checkout gvm-libs
          command: git clone --depth 1 https://github.com/greenbone/gvm-libs.git
      - run:
          working_directory: ~/gvm-libs
          name: Configure and compile gvm-libs (Debug)
          command: pushd gvm-libs && mkdir build && cd build/ && cmake -DCMAKE_BUILD_TYPE=Debug .. && make install && popd
      - checkout
      - run:
          name: Configure and Compile (Debug)
          command: mkdir build && cd build/ && cmake -DCMAKE_BUILD_TYPE=Debug .. && make install
  build_postgresql_debug:
    docker:
      - image: greenbone/build-env-gvm-master-debian-stretch-gcc-postgresql
    steps:
      - run:
          working_directory: ~/gvm-libs
          name: Checkout gvm-libs
          command: git clone --depth 1 https://github.com/greenbone/gvm-libs.git
      - run:
          working_directory: ~/gvm-libs
          name: Configure and compile gvm-libs (Debug)
          command: pushd gvm-libs && mkdir build && cd build/ && cmake -DCMAKE_BUILD_TYPE=Debug .. && make install && popd
      - checkout
      - run:
          name: Configure and Compile (Debug)
          command: mkdir build && cd build/ && cmake -DBACKEND=POSTGRESQL -DCMAKE_BUILD_TYPE=Debug .. && make install
  build_sqlite_release:
    docker:
      - image: greenbone/build-env-gvm-master-debian-stretch-gcc-sqlite
    steps:
      - run:
          working_directory: ~/gvm-libs
          name: Checkout gvm-libs
          command: git clone --depth 1 https://github.com/greenbone/gvm-libs.git
      - run:
          working_directory: ~/gvm-libs
          name: Configure and compile gvm-libs (Release)
          command: pushd gvm-libs && mkdir build && cd build/ && cmake -DCMAKE_BUILD_TYPE=Release .. && make install && popd
      - checkout
      - run:
          name: Configure and Compile (Release)
          command: mkdir build && cd build/ && cmake -DCMAKE_BUILD_TYPE=Release .. && make install
  build_postgresql_release:
    docker:
      - image: greenbone/build-env-gvm-master-debian-stretch-gcc-postgresql
    steps:
      - run:
          working_directory: ~/gvm-libs
          name: Checkout gvm-libs
          command: git clone --depth 1 https://github.com/greenbone/gvm-libs.git
      - run:
          working_directory: ~/gvm-libs
          name: Configure and compile gvm-libs (Release)
          command: pushd gvm-libs && mkdir build && cd build/ && cmake -DCMAKE_BUILD_TYPE=Release .. && make install && popd
      - checkout
      - run:
          name: Configure and Compile (Release)
          command: mkdir build && cd build/ && cmake -DBACKEND=POSTGRESQL -DCMAKE_BUILD_TYPE=Release .. && make install
  build_doc:
    docker:
      - image: greenbone/code-metrics-doxygen-debian-stretch
    steps:
      - checkout
      - run:
          name: Build standard documentation, failing if there are warnings
          command: mkdir build && cd build/ && cmake -DSKIP_SRC=1 .. && make doc 2>&1 1>/dev/null | { ! grep --invert-match "CGI::Pretty"; }
  gen_xml_doc:
    docker:
      - image: greenbone/code-metrics-doxygen-debian-stretch
    steps:
      - checkout
      - run:
          name: Generate documentation (XML)
          command: mkdir build && cd build/ && cmake -DSKIP_SRC=1 .. && make doc-xml 2> ~/doxygen-stderr.txt
      - store_artifacts:
          path: ~/doxygen-stderr.txt
      - persist_to_workspace:
          root: ~/project/build/doc/generated/
          paths:
            - xml
  doc_coverage:
    docker:
      - image: circleci/python:3.6
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - checkout
      - run:
          name: Install coverxygen and codecov
          command: |
            python3 -m venv venv
            . venv/bin/activate
            pip install 'coverxygen>=1.3.1' codecov
      - run:
          name: Establish documentation coverage
          command: |
            . venv/bin/activate
            python -m coverxygen --src-dir /root/project --xml-dir /tmp/workspace/xml --output lcov.info
      - run:
          name: Upload coverage to Codecov
          command: |
            . venv/bin/activate
            codecov -F documentation -X gcov -f lcov.info
workflows:
  version: 2
  build:
    jobs:
      - build_sqlite_debug
      - build_postgresql_debug
      - build_sqlite_release
      - build_postgresql_release
      - build_doc
      - gen_xml_doc
      - doc_coverage:
          requires:
            - gen_xml_doc

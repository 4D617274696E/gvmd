#### OpenVAS Management Protocol (OMP)
####
#### Version: 1.0
####
#### The "management" protocol of the Open Vulnerability Assessment System.

### Preamble

start = command | response

command
  = authenticate
    | commands
    | create_agent
    | create_config
    | create_escalator
    | create_lsc_credential
    | create_note
    | create_override
    | create_schedule
    | create_target
    | create_task
    | delete_agent
    | delete_config
    | delete_escalator
    | delete_lsc_credential
    | delete_note
    | delete_override
    | delete_report
    | delete_schedule
    | delete_target
    | delete_task
    | get_agents
    | get_configs
    | get_dependencies
    | get_escalators
    | get_lsc_credentials
    | get_notes
    | get_nvts
    | get_nvt_families
    | get_nvt_feed_checksum
    | get_overrides
    | get_preferences
    | get_version
    | help
    | modify_config
    | modify_note
    | modify_override
    | modify_report
    | modify_task
    | pause_task
    | resume_or_start_task
    | resume_paused_task
    | resume_stopped_task
    | start_task
    | stop_task
    | test_escalator

response
  = authenticate_response
    | commands_response
    | create_agent_response
    | create_config_response
    | create_escalator_response
    | create_lsc_credential_response
    | create_note_response
    | create_override_response
    | create_schedule_response
    | create_target_response
    | create_task_response
    | delete_agent_response
    | delete_config_response
    | delete_escalator_response
    | delete_lsc_credential_response
    | delete_note_response
    | delete_override_response
    | delete_report_response
    | delete_schedule_response
    | delete_target_response
    | delete_task_response
    | get_agents_response
    | get_configs_response
    | get_dependencies_response
    | get_escalators_response
    | get_lsc_credentials_response
    | get_notes_response
    | get_nvts_response
    | get_nvt_families_response
    | get_nvt_feed_checksum_response
    | get_overrides_response
    | get_preferences_response
    | get_version_response
    | help_response
    | modify_config_response
    | modify_note_response
    | modify_override_response
    | modify_report_response
    | modify_task_response
    | pause_task_response
    | resume_or_start_task_response
    | resume_paused_task_response
    | resume_stopped_task_response
    | start_task_response
    | stop_task_response
    | test_escalator_response

### Data Types

# Base64 encoded data.
base64 = xsd:base64Binary
# A true of false value.
boolean = text
# A true of false value, after conversion to an integer.
boolean_atoi = text
# A date and time, in the C `ctime' format.
ctime = text
# An integer.
integer = xsd:integer
# A name.
name = xsd:string
# An Object Identifier (OID)..
oid = xsd:token { pattern = "[0-9\.]{1,80}" }
# A string describing an order for sorting.
sort_order = text
# The success or failure status of a command.
status = xsd:token { pattern = "200|201|202|400|401|403|404|409|500|503" }
# A threat level.
threat = xsd:token { pattern = "High|Medium|Low|Log|Debug" }
# A unit of time.
time_unit = xsd:token { pattern = "second|minute|hour|day|week|month|year|decade" }
# A Universally Unique Identifier (UUID).
uuid = xsd:token { pattern = "[0-9abcdefABCDEF\-]{1,40}" }

### Commands

## Command authenticate
##
## Authenticate with the manager.

authenticate
 = element authenticate
     {
       ""
       & authenticate_credentials
     }

authenticate_credentials
 = element credentials
     {
       ""
       & authenticate_credentials_username
       & authenticate_credentials_password
     }

# The login name of the user.
authenticate_credentials_username
 = element username
     {
       text
     }

# The user's password.
authenticate_credentials_password
 = element password
     {
       text
     }

## Command commands
##
## Run a list of commands.

commands
 = element commands
     {
       ""
       & command*
     }

## Command create_agent
##
## Create an agent.

create_agent
 = element create_agent
     {
       ""
       & create_agent_installer
       & create_agent_name
       & create_agent_comment?
       & create_agent_howto_install?
       & create_agent_howto_use?
     }

# A file that installs the agent on a target machine.
create_agent_installer
 = element installer
     {
       base64
       & create_agent_installer_signature
     }

# A detached OpenPGP signature of the installer.
create_agent_installer_signature
 = element signature
     {
       base64
     }

# A name for the installer.
create_agent_name
 = element name
     {
       name
     }

# A comment on the agent.
create_agent_comment
 = element comment
     {
       text
     }

# A file that describes how to install the agent.
create_agent_howto_install
 = element howto_install
     {
       base64
     }

# A file that describes how to use the agent.
create_agent_howto_use
 = element howto_use
     {
       base64
     }

## Command create_config
##
## Create a config.

create_config
 = element create_config
     {
       ""
       & create_config_comment?
       & ( create_config_copy
           | get_configs_response
           | create_config_rcfile )
       & create_config_name
     }

# A comment on the config.
create_config_comment
 = element comment
     {
       text
     }

# The UUID of an existing config.
create_config_copy
 = element copy
     {
       uuid
     }

# A openvasrc style file that defines the config.
create_config_rcfile
 = element rcfile
     {
       base64
     }

# A name for the config.
create_config_name
 = element name
     {
       name
     }

## Command create_escalator
##
## Create an escalator.

create_escalator
 = element create_escalator
     {
       ""
       & create_escalator_name
       & create_escalator_comment?
       & create_escalator_condition
       & create_escalator_event
       & create_escalator_method
     }

# A name for the escalator.
create_escalator_name
 = element name
     {
       name
     }

# A comment on the escalator.
create_escalator_comment
 = element comment
     {
       text
     }

# The condition that must be satisfied for escalation.
create_escalator_condition
 = element condition
     {
       text
       & create_escalator_condition_data*
     }

# Some data that defines the condition.
create_escalator_condition_data
 = element data
     {
       text
       & create_escalator_condition_data_name
     }

# The name of the condition data.
create_escalator_condition_data_name
 = element name
     {
       text
     }

# The event that must happen for escalation.
create_escalator_event
 = element event
     {
       text
       & create_escalator_event_data*
     }

# Some data that defines the event.
create_escalator_event_data
 = element data
     {
       text
       & create_escalator_event_data_name
     }

# The name of the event data.
create_escalator_event_data_name
 = element name
     {
       text
     }

# The method by which escalation must occur.
create_escalator_method
 = element method
     {
       text
       & create_escalator_method_data*
     }

# Some data that defines the method.
create_escalator_method_data
 = element data
     {
       text
       & create_escalator_method_data_name
     }

# The name of the method data.
create_escalator_method_data_name
 = element name
     {
       text
     }

## Command create_lsc_credential
##
## Create an LSC credential.

create_lsc_credential
 = element create_lsc_credential
     {
       ""
       & create_lsc_credential_name
       & create_lsc_credential_comment?
       & create_lsc_credential_login
       & create_lsc_credential_password?
     }

# A name for the LSC credential.
create_lsc_credential_name
 = element name
     {
       name
     }

# A comment on the LSC credential.
create_lsc_credential_comment
 = element comment
     {
       text
     }

# The user name of the credential.
create_lsc_credential_login
 = element login
     {
       text
     }

# The password for the credential login.
create_lsc_credential_password
 = element password
     {
       text
     }

## Command create_note
##
## Create a note.

create_note
 = element create_note
     {
       ""
       & create_note_text
       & create_note_nvt
       & create_note_comment?
       & create_note_hosts?
       & create_note_port?
       & create_note_result?
       & create_note_task?
       & create_note_threat?
     }

# The text of the note.
create_note_text
 = element text
     {
       text
     }

# NVT to which note applies.
create_note_nvt
 = element nvt
     {
       ""
       & attribute oid { oid }
     }

# A comment on the note.
create_note_comment
 = element comment
     {
       text
     }

# A textual list of hosts.
create_note_hosts
 = element hosts
     {
       text
     }

# Port to which note applies.
create_note_port
 = element port
     {
       text
     }

# Result to which note applies.
create_note_result
 = element result
     {
       ""
       & attribute id { uuid }
     }

# Task to which note applies.
create_note_task
 = element task
     {
       ""
       & attribute id { uuid }
     }

# Threat level to which note applies.
create_note_threat
 = element threat
     {
       threat
     }

## Command create_override
##
## Create an override.

create_override
 = element create_override
     {
       ""
       & create_override_text
       & create_override_nvt
       & create_override_comment?
       & create_override_hosts?
       & create_override_new_threat?
       & create_override_port?
       & create_override_result?
       & create_override_task?
       & create_override_threat?
     }

# The text of the override.
create_override_text
 = element text
     {
       text
     }

# NVT to which override applies.
create_override_nvt
 = element nvt
     {
       ""
       & attribute oid { oid }
     }

# A comment on the override.
create_override_comment
 = element comment
     {
       text
     }

# A textual list of hosts.
create_override_hosts
 = element hosts
     {
       text
     }

# New threat level for result.
create_override_new_threat
 = element new_threat
     {
       threat
     }

# Port to which override applies.
create_override_port
 = element port
     {
       text
     }

# Result to which override applies.
create_override_result
 = element result
     {
       ""
       & attribute id { uuid }
     }

# Task to which override applies.
create_override_task
 = element task
     {
       ""
       & attribute id { uuid }
     }

# Threat level to which override applies.
create_override_threat
 = element threat
     {
       threat
     }

## Command create_schedule
##
## Create a schedule.

create_schedule
 = element create_schedule
     {
       ""
       & create_schedule_name
       & create_schedule_comment?
       & create_schedule_first_time
       & create_schedule_duration
       & create_schedule_period
     }

# A name for the schedule.
create_schedule_name
 = element name
     {
       name
     }

# A comment on the schedule.
create_schedule_comment
 = element comment
     {
       text
     }

# The first time the schedule will run.
create_schedule_first_time
 = element first_time
     {
       ""
       & create_schedule_first_time_minute
       & create_schedule_first_time_hour
       & create_schedule_first_time_day_of_month
       & create_schedule_first_time_month
       & create_schedule_first_time_year
     }

create_schedule_first_time_minute
 = element minute
     {
       integer
     }

create_schedule_first_time_hour
 = element hour
     {
       integer
     }

create_schedule_first_time_day_of_month
 = element day_of_month
     {
       integer
     }

create_schedule_first_time_month
 = element month
     {
       integer
     }

create_schedule_first_time_year
 = element year
     {
       integer
     }

# How long the Manager will run the scheduled task for.
create_schedule_duration
 = element duration
     {
       ""
       & create_schedule_duration_unit
     }

# Duration time unit.
create_schedule_duration_unit
 = element unit
     {
       time_unit
     }

# How often the Manager will repeat the scheduled task.
create_schedule_period
 = element period
     {
       ""
       & create_schedule_period_unit
     }

# Period time unit.
create_schedule_period_unit
 = element unit
     {
       time_unit
     }

## Command create_target
##
## Create a target.

create_target
 = element create_target
     {
       ""
       & create_target_name
       & create_target_comment?
       & create_target_hosts
       & create_target_lsc_credential
       & create_target_target_locator
     }

# A name for the target.
create_target_name
 = element name
     {
       name
     }

# A comment on the target.
create_target_comment
 = element comment
     {
       text
     }

# A textual list of hosts, which may be empty.
create_target_hosts
 = element hosts
     {
       text
     }

# Login credentials for target.
create_target_lsc_credential
 = element lsc_credential
     {
       ""
       & attribute id { uuid }
     }

# Target locator (for example, for LDAP).
create_target_target_locator
 = element target_locator
     {
       ""
       & create_target_target_locator_username?
       & create_target_target_locator_password?
     }

# The login for the target locator.
create_target_target_locator_username
 = element username
     {
       text
     }

# The password for the target locator.
create_target_target_locator_password
 = element password
     {
       text
     }

## Command create_task
##
## Create a task.

create_task
 = element create_task
     {
       ""
       & create_task_name
       & create_task_comment?
       & create_task_config
       & create_task_target
       & create_task_escalator?
       & create_task_schedule?
       & create_task_rcfile?
     }

# A name for the task.
create_task_name
 = element name
     {
       name
     }

# A comment on the task.
create_task_comment
 = element comment
     {
       text
     }

# The scan configuration used by the task.
create_task_config
 = element config
     {
       ""
       & attribute id { uuid }
     }

# The hosts scanned by the task.
create_task_target
 = element target
     {
       ""
       & attribute id { uuid }
     }

# An escalator that applies to the task.
create_task_escalator
 = element escalator
     {
       ""
       & attribute id { uuid }
     }

# When the task will run.
create_task_schedule
 = element schedule
     {
       ""
       & attribute id { uuid }
     }

# An openvasrc style file defining the task.
create_task_rcfile
 = element rcfile
     {
       base64
     }

## Command delete_agent
##
## Delete an agent.

delete_agent
 = element delete_agent
     {
       ""
       & attribute agent_id { uuid }
     }

## Command delete_config
##
## Delete a config.

delete_config
 = element delete_config
     {
       ""
       & attribute config_id { uuid }
     }

## Command delete_escalator
##
## Delete an escalator.

delete_escalator
 = element delete_escalator
     {
       ""
       & attribute escalator_id { uuid }
     }

## Command delete_lsc_credential
##
## Delete an LSC credential.

delete_lsc_credential
 = element delete_lsc_credential
     {
       ""
       & attribute lsc_credential_id { uuid }
     }

## Command delete_note
##
## Delete a note.

delete_note
 = element delete_note
     {
       ""
       & attribute note_id { uuid }
     }

## Command delete_override
##
## Delete a override.

delete_override
 = element delete_override
     {
       ""
       & attribute override_id { uuid }
     }

## Command delete_report
##
## Delete a report.

delete_report
 = element delete_report
     {
       ""
       & attribute report_id { uuid }
     }

## Command delete_schedule
##
## Delete a schedule.

delete_schedule
 = element delete_schedule
     {
       ""
       & attribute schedule_id { uuid }
     }

## Command delete_target
##
## Delete a target.

delete_target
 = element delete_target
     {
       ""
       & attribute target_id { uuid }
     }

## Command delete_task
##
## Delete a task.

delete_task
 = element delete_task
     {
       ""
       & attribute task_id { uuid }
     }

## Command get_agents
##
## Get all agents.

get_agents
 = element get_agents
     {
       ""
       & # ID of single agent to get.
       attribute agent_id { uuid }?
       & attribute format { xsd:token { pattern = "installer|howto_install|howto_use" } }?
       & attribute sort_order { sort_order }?
       & attribute sort_field { text }?
     }

## Command get_configs
##
## Get all configs.

get_configs
 = element get_configs
     {
       ""
       & # ID of single config to get.
       attribute config_id { uuid }?
       & attribute families { boolean }?
       & attribute preferences { boolean }?
       & attribute sort_order { sort_order }?
       & attribute sort_field { text }?
     }

## Command get_dependencies
##
## Get dependencies for all available NVTs.

get_dependencies
 = element get_dependencies
     {
       ""
       & # ID of single NVT for which to get dependencies.
       attribute nvt_oid { oid }?
     }

## Command get_escalators
##
## Get all escalators.

get_escalators
 = element get_escalators
     {
       ""
       & # ID of single escalator to get.
       attribute escalator_id { uuid }?
       & attribute sort_order { sort_order }?
       & attribute sort_field { text }?
     }

## Command get_lsc_credentials
##
## Get all LSC credentials.

get_lsc_credentials
 = element get_lsc_credentials
     {
       ""
       & # ID of single LSC credential to get.
       attribute lsc_credential_id { uuid }?
       & attribute format { xsd:token { pattern = "key|rpm|deb|exe" } }?
       & attribute sort_order { sort_order }?
       & attribute sort_field { text }?
     }

## Command get_notes
##
## Get all notes.

get_notes
 = element get_notes
     {
       ""
       & # ID of single note to get.
       attribute note_id { uuid }?
       & attribute nvt_oid { oid }?
       & attribute task_id { uuid }?
       & attribute details { boolean }?
       & attribute result { boolean }?
       & attribute sort_order { sort_order }?
       & attribute sort_field { text }?
     }

## Command get_nvts
##
## Get all NVTs.

get_nvts
 = element get_nvts
     {
       ""
       & # Single NVT to get.
       attribute nvt_oid { oid }
       & # Whether to include full details.
       attribute details { boolean }?
       & # Whether to include preference.
       attribute preferences { boolean }?
       & # Whether to include preference count.
       attribute preference_count { boolean }?
       & # Whether to include the special timeout preference.
       attribute timeout { boolean }?
       & # ID of config to which to limit the NVT listing.
       attribute config_id { uuid }?
       & # Family to which to limit NVT listing.
       attribute family { text }?
       & attribute sort_order { sort_order }?
       & attribute sort_field { text }?
     }

## Command get_nvt_families
##
## Get a list of all NVT families.

get_nvt_families
 = element get_nvt_families
     {
       ""
       & attribute sort_order { sort_order }?
     }

## Command get_nvt_feed_checksum
##
## Get checksum for entire NVT collection.

get_nvt_feed_checksum
 = element get_nvt_feed_checksum
     {
       ""
       & attribute algorithm { text }?
     }

## Command get_overrides
##
## Get all overrides.

get_overrides
 = element get_overrides
     {
       ""
       & # ID of single override to get.
       attribute override_id { uuid }?
       & attribute nvt_oid { oid }?
       & attribute task_id { uuid }?
       & attribute details { boolean }?
       & attribute result { boolean }?
       & attribute sort_order { sort_order }?
       & attribute sort_field { text }?
     }

## Command get_preferences
##
## Get all preferences.

get_preferences
 = element get_preferences
     {
       ""
       & attribute nvt_oid { oid }?
       & # ID of config of which to show preference values.
       attribute config_id { uuid }?
       & # The name of a particular preference to get.
       attribute preference { text }?
     }

## Command get_version
##
## Get the OpenVAS Manager Protocol version.

get_version
 = element get_version
     {
       ""
     }

## Command help
##
## Get the help text.

help
 = element help
     {
       ""
     }

## Command modify_config
##
## Update an existing config.

modify_config
 = element modify_config
     {
       ""
       & # ID of config to modify.
       attribute config_id { uuid }
       & ( modify_config_preference
           | modify_config_family_selection
           | modify_config_nvt_selection )
     }

modify_config_preference
 = element preference
     {
       ""
       & modify_config_preference_name
       & modify_config_preference_nvt?
       & modify_config_preference_value?
     }

# The name of the preference to modify.
modify_config_preference_name
 = element name
     {
       name
     }

# NVT associated with preference to modify.
modify_config_preference_nvt
 = element nvt
     {
       ""
       & attribute oid { oid }
     }

# New value for preference.
modify_config_preference_value
 = element value
     {
       base64
     }

modify_config_family_selection
 = element family_selection
     {
       ""
       & modify_config_family_selection_growing?
       & modify_config_family_selection_family*
     }

# Whether new families should be added to the config.
modify_config_family_selection_growing
 = element growing
     {
       boolean_atoi
     }

modify_config_family_selection_family
 = element family
     {
       ""
       & modify_config_family_selection_family_all?
       & modify_config_family_selection_family_growing?
       & modify_config_family_selection_family_name
     }

# Whether to select all NVTs initially.
modify_config_family_selection_family_all
 = element all
     {
       boolean_atoi
     }

# Whether to add newly arrived nvts to the selection.
modify_config_family_selection_family_growing
 = element growing
     {
       boolean_atoi
     }

modify_config_family_selection_family_name
 = element name
     {
       name
     }

modify_config_nvt_selection
 = element nvt_selection
     {
       ""
       & modify_config_nvt_selection_family
       & modify_config_nvt_selection_nvt*
     }

# Name of family to modify.
modify_config_nvt_selection_family
 = element family
     {
       name
     }

modify_config_nvt_selection_nvt
 = element nvt
     {
       ""
       & attribute oid { oid }
     }

## Command modify_note
##
## Modify an existing note.

modify_note
 = element modify_note
     {
       ""
       & # ID of note to modify.
       attribute note_id { uuid }
       & modify_note_hosts?
       & modify_note_port?
       & modify_note_result?
       & modify_note_task?
       & modify_note_text
       & modify_note_threat?
     }

# A textual list of hosts.
modify_note_hosts
 = element hosts
     {
       text
     }

# Port to which note applies.
modify_note_port
 = element port
     {
       text
     }

# The text of the note.
modify_note_text
 = element text
     {
       text
     }

# Threat level to which note applies.
modify_note_threat
 = element threat
     {
       threat
     }

# Task to which note applies.
modify_note_task
 = element task
     {
       ""
       & attribute id { uuid }
     }

# Result to which note applies.
modify_note_result
 = element result
     {
       ""
       & attribute id { uuid }
     }

## Command modify_override
##
## Modify an existing override.

modify_override
 = element modify_override
     {
       ""
       & # ID of override to modify.
       attribute override_id { uuid }
       & modify_override_hosts?
       & modify_override_new_threat?
       & modify_override_port?
       & modify_override_result?
       & modify_override_task?
       & modify_override_text
       & modify_override_threat?
     }

# A textual list of hosts.
modify_override_hosts
 = element hosts
     {
       text
     }

# New threat level for result.
modify_override_new_threat
 = element new_threat
     {
       threat
     }

# Port to which override applies.
modify_override_port
 = element port
     {
       text
     }

# Text describing the override.
modify_override_text
 = element text
     {
       text
     }

# Threat level to which override applies.
modify_override_threat
 = element threat
     {
       threat
     }

# Task to which override applies.
modify_override_task
 = element task
     {
       ""
       & attribute id { uuid }
     }

# Result to which override applies.
modify_override_result
 = element result
     {
       ""
       & attribute id { uuid }
     }

## Command modify_report
##
## Modify an existing report.

modify_report
 = element modify_report
     {
       ""
       & # ID of report to modify.
       attribute report_id { uuid }
       & modify_report_comment
     }

# The comment on the report.
modify_report_comment
 = element comment
     {
       text
     }

## Command modify_task
##
## Modify an existing task.

modify_task
 = element modify_task
     {
       ""
       & # ID of task to modify.
       attribute task_id { uuid }
       & ( modify_task_comment
           | modify_task_escalator
           | modify_task_name
           | modify_task_rcfile
           | modify_task_schedule
           | modify_task_file )
     }

# The comment on the task.
modify_task_comment
 = element comment
     {
       text
     }

# Task escalator.
modify_task_escalator
 = element escalator
     {
       ""
       & attribute id { uuid }
     }

# The name of the task.
modify_task_name
 = element name
     {
       name
     }

# An openvasrc style file describing the task.
modify_task_rcfile
 = element rcfile
     {
       base64
     }

# Task schedule.
modify_task_schedule
 = element schedule
     {
       ""
       & attribute id { uuid }
     }

# File to attach to task.
modify_task_file
 = element file
     {
       base64
       & attribute name { text }
       & attribute action { xsd:token { pattern = "update|remove" } }
     }

## Command pause_task
##
## Pause a running task.

pause_task
 = element pause_task
     {
       ""
       & attribute task_id { uuid }
     }

## Command resume_or_start_task
##
## Resume task if stopped, else start task.

resume_or_start_task
 = element resume_or_start_task
     {
       ""
       & attribute task_id { uuid }
     }

## Command resume_paused_task
##
## Resume a paused task.

resume_paused_task
 = element resume_paused_task
     {
       ""
       & attribute task_id { uuid }
     }

## Command resume_stopped_task
##
## Resume a stopped task.

resume_stopped_task
 = element resume_stopped_task
     {
       ""
       & attribute task_id { uuid }
     }

## Command start_task
##
## Manually start an existing task.

start_task
 = element start_task
     {
       ""
       & attribute task_id { uuid }
     }

## Command stop_task
##
## Stop a running task.

stop_task
 = element stop_task
     {
       ""
       & attribute task_id { uuid }
     }

## Command test_escalator
##
## Run an escalator.

test_escalator
 = element test_escalator
     {
       ""
       & attribute task_id { uuid }
     }

### Responses

## Response to authenticate

authenticate_response
 = element authenticate_response
     {
       ""
       & attribute status { status }
       & attribute status_text { text }
     }

## Response to commands

commands_response
 = element commands_response
     {
       ""
       & attribute status { status }
       & attribute status_text { text }
       & response*
     }

## Response to create_agent

create_agent_response
 = element create_agent_response
     {
       ""
       & attribute status { status }
       & attribute status_text { text }
       & attribute id { uuid }
     }

## Response to create_config

create_config_response
 = element create_config_response
     {
       ""
       & attribute status { status }
       & attribute status_text { text }
       & attribute id { uuid }
     }

## Response to create_escalator

create_escalator_response
 = element create_escalator_response
     {
       ""
       & attribute status { status }
       & attribute status_text { text }
       & attribute id { uuid }
     }

## Response to create_lsc_credential

create_lsc_credential_response
 = element create_lsc_credential_response
     {
       ""
       & attribute status { status }
       & attribute status_text { text }
       & attribute id { uuid }
     }

## Response to create_note

create_note_response
 = element create_note_response
     {
       ""
       & attribute status { status }
       & attribute status_text { text }
       & attribute id { uuid }
     }

## Response to create_override

create_override_response
 = element create_override_response
     {
       ""
       & attribute status { status }
       & attribute status_text { text }
       & attribute id { uuid }
     }

## Response to create_schedule

create_schedule_response
 = element create_schedule_response
     {
       ""
       & attribute status { status }
       & attribute status_text { text }
       & attribute id { uuid }
     }

## Response to create_target

create_target_response
 = element create_target_response
     {
       ""
       & attribute status { status }
       & attribute status_text { text }
       & attribute id { uuid }
     }

## Response to create_task

create_task_response
 = element create_task_response
     {
       ""
       & attribute status { status }
       & attribute status_text { text }
       & attribute id { uuid }
     }

## Response to delete_agent

delete_agent_response
 = element delete_agent_response
     {
       ""
       & attribute status { status }
       & attribute status_text { text }
     }

## Response to delete_config

delete_config_response
 = element delete_config_response
     {
       ""
       & attribute status { status }
       & attribute status_text { text }
     }

## Response to delete_escalator

delete_escalator_response
 = element delete_escalator_response
     {
       ""
       & attribute status { status }
       & attribute status_text { text }
     }

## Response to delete_lsc_credential

delete_lsc_credential_response
 = element delete_lsc_credential_response
     {
       ""
       & attribute status { status }
       & attribute status_text { text }
     }

## Response to delete_note

delete_note_response
 = element delete_note_response
     {
       ""
       & attribute status { status }
       & attribute status_text { text }
     }

## Response to delete_override

delete_override_response
 = element delete_override_response
     {
       ""
       & attribute status { status }
       & attribute status_text { text }
     }

## Response to delete_report

delete_report_response
 = element delete_report_response
     {
       ""
       & attribute status { status }
       & attribute status_text { text }
     }

## Response to delete_schedule

delete_schedule_response
 = element delete_schedule_response
     {
       ""
       & attribute status { status }
       & attribute status_text { text }
     }

## Response to delete_target

delete_target_response
 = element delete_target_response
     {
       ""
       & attribute status { status }
       & attribute status_text { text }
     }

## Response to delete_task

delete_task_response
 = element delete_task_response
     {
       ""
       & attribute status { status }
       & attribute status_text { text }
     }

## Response to get_agents

get_agents_response
 = element get_agents_response
     {
       ""
       & attribute status { status }
       & attribute status_text { text }
       & get_agents_response_agent*
     }

get_agents_response_agent
 = element agent
     {
       ""
       & attribute id { uuid }
       & get_agents_response_agent_name
       & get_agents_response_agent_comment
       & get_agents_response_agent_in_use
       & ( get_agents_response_agent_installer
           | get_agents_response_agent_package )
     }

# The name of the agent.
get_agents_response_agent_name
 = element name
     {
       name
     }

# The comment on the agent.
get_agents_response_agent_comment
 = element comment
     {
       text
     }

# Whether the agent is in use.
get_agents_response_agent_in_use
 = element in_use
     {
       boolean
     }

get_agents_response_agent_installer
 = element installer
     {
       ""
       & get_agents_response_agent_installer_trust
     }

# Whether signature verification succeeded.
get_agents_response_agent_installer_trust
 = element trust
     {
       xsd:token { pattern = "yes|no|unknown" }
     }

# Either the installer or one of the HOWTOs.
get_agents_response_agent_package
 = element package
     {
       base64
       & get_agents_response_agent_package_filename
     }

# The filename of the package.
get_agents_response_agent_package_filename
 = element filename
     {
       text
     }

## Response to get_configs

get_configs_response
 = element get_configs_response
     {
       ""
       & attribute status { status }
       & attribute status_text { text }
       & get_configs_response_config*
     }

get_configs_response_config
 = element config
     {
       ""
       & get_configs_response_config_name
       & get_configs_response_config_comment
       & get_configs_response_config_family_count
       & get_configs_response_config_nvt_count
       & get_configs_response_config_in_use
       & get_configs_response_config_tasks
       & get_configs_response_config_families?
       & get_configs_response_config_preferences?
     }

# The name of the config.
get_configs_response_config_name
 = element name
     {
       name
     }

# The comment on the config.
get_configs_response_config_comment
 = element comment
     {
       text
     }

# The number of families selected by the config.
get_configs_response_config_family_count
 = element family_count
     {
       integer
       & get_configs_response_config_family_count_growing
     }

# 
              Whether new families are automatically added to the
              config
            .
get_configs_response_config_family_count_growing
 = element growing
     {
       boolean
     }

# The number of NVTs selected by the config.
get_configs_response_config_nvt_count
 = element nvt_count
     {
       integer
       & get_configs_response_config_nvt_count_growing
     }

# 
              Whether new NVTs are automatically added to the config
            .
get_configs_response_config_nvt_count_growing
 = element growing
     {
       boolean
     }

# Whether any tasks are using the config.
get_configs_response_config_in_use
 = element in_use
     {
       boolean
     }

# All tasks using the config.
get_configs_response_config_tasks
 = element tasks
     {
       ""
       & get_configs_response_config_tasks_task*
     }

get_configs_response_config_tasks_task
 = element task
     {
       ""
       & attribute id { uuid }
       & get_configs_response_config_tasks_task_name
     }

# The name of the task.
get_configs_response_config_tasks_task_name
 = element name
     {
       name
     }

# All families selected by the config.
get_configs_response_config_families
 = element families
     {
       ""
       & get_configs_response_config_families_family*
     }

get_configs_response_config_families_family
 = element family
     {
       ""
       & get_configs_response_config_families_family_name
       & get_configs_response_config_families_family_nvt_count
       & get_configs_response_config_families_family_max_nvt_count
       & get_configs_response_config_families_family_growing
     }

# The name of the family.
get_configs_response_config_families_family_name
 = element name
     {
       name
     }

# The number of NVTs selected in the family.
get_configs_response_config_families_family_nvt_count
 = element nvt_count
     {
       integer
     }

# The total number of NVTs in the family.
get_configs_response_config_families_family_max_nvt_count
 = element max_nvt_count
     {
       integer
     }

# 
                Whether new NVTs in the family are automatically added to the selection
              .
get_configs_response_config_families_family_growing
 = element growing
     {
       boolean
     }

# Preferences for all NVTs selected by the config.
get_configs_response_config_preferences
 = element preferences
     {
       ""
       & get_configs_response_config_preferences_preference*
     }

get_configs_response_config_preferences_preference
 = element preference
     {
       ""
       & get_configs_response_config_preferences_preference_nvt
       & get_configs_response_config_preferences_preference_name
       & get_configs_response_config_preferences_preference_type
       & get_configs_response_config_preferences_preference_value
     }

# NVT to which preference applies.
get_configs_response_config_preferences_preference_nvt
 = element nvt
     {
       ""
       & attribute oid { oid }
       & get_configs_response_config_preferences_preference_nvt_name
     }

# The name of the NVT.
get_configs_response_config_preferences_preference_nvt_name
 = element name
     {
       name
     }

# The name of the preference.
get_configs_response_config_preferences_preference_name
 = element name
     {
       name
     }

# The type of preference.
get_configs_response_config_preferences_preference_type
 = element type
     {
       text
     }

# The value of the preference.
get_configs_response_config_preferences_preference_value
 = element value
     {
       text
     }

## Response to get_dependencies

get_dependencies_response
 = element get_dependencies_response
     {
       ""
       & attribute status { status }
       & attribute status_text { text }
       & get_dependencies_response_nvt*
     }

get_dependencies_response_nvt
 = element nvt
     {
       ""
       & attribute oid { oid }
       & get_dependencies_response_nvt_name
       & get_dependencies_response_nvt_requires
     }

# The name of the NVT.
get_dependencies_response_nvt_name
 = element name
     {
       name
     }

get_dependencies_response_nvt_requires
 = element requires
     {
       ""
       & get_dependencies_response_nvt_requires_nvt*
     }

get_dependencies_response_nvt_requires_nvt
 = element nvt
     {
       ""
       & attribute oid { oid }
       & get_dependencies_response_nvt_requires_nvt_name
     }

# The name of the NVT.
get_dependencies_response_nvt_requires_nvt_name
 = element name
     {
       name
     }

## Response to get_escalators

get_escalators_response
 = element get_escalators_response
     {
       ""
       & attribute status { status }
       & attribute status_text { text }
       & get_escalators_response_escalator*
     }

get_escalators_response_escalator
 = element escalator
     {
       ""
       & get_escalators_response_escalator_name
       & get_escalators_response_escalator_comment
       & get_escalators_response_escalator_in_use
       & get_escalators_response_escalator_condition
       & get_escalators_response_escalator_event
       & get_escalators_response_escalator_method
     }

# The name of the escalator.
get_escalators_response_escalator_name
 = element name
     {
       name
     }

# The comment on the escalator.
get_escalators_response_escalator_comment
 = element comment
     {
       text
     }

# Whether any tasks are using the escalator.
get_escalators_response_escalator_in_use
 = element in_use
     {
       boolean
     }

# The condition that must be satisfied for escalation.
get_escalators_response_escalator_condition
 = element condition
     {
       text
       & get_escalators_response_escalator_condition_data*
     }

# Some data that defines the condition.
get_escalators_response_escalator_condition_data
 = element data
     {
       text
       & get_escalators_response_escalator_condition_data_name
     }

# The name of the condition data.
get_escalators_response_escalator_condition_data_name
 = element name
     {
       text
     }

# The event that must happen for escalation.
get_escalators_response_escalator_event
 = element event
     {
       text
       & get_escalators_response_escalator_event_data*
     }

# Some data that defines the event.
get_escalators_response_escalator_event_data
 = element data
     {
       text
       & get_escalators_response_escalator_event_data_name
     }

# The name of the event data.
get_escalators_response_escalator_event_data_name
 = element name
     {
       text
     }

# The method by which escalation must occur.
get_escalators_response_escalator_method
 = element method
     {
       text
       & get_escalators_response_escalator_method_data*
     }

# Some data that defines the method.
get_escalators_response_escalator_method_data
 = element data
     {
       text
       & get_escalators_response_escalator_method_data_name
     }

# The name of the method data.
get_escalators_response_escalator_method_data_name
 = element name
     {
       text
     }

## Response to get_lsc_credentials

get_lsc_credentials_response
 = element get_lsc_credentials_response
     {
       ""
       & attribute status { status }
       & attribute status_text { text }
       & get_lsc_credentials_response_lsc_credential*
     }

get_lsc_credentials_response_lsc_credential
 = element lsc_credential
     {
       ""
       & attribute id { uuid }
       & get_lsc_credentials_response_lsc_credential_name
       & get_lsc_credentials_response_lsc_credential_login
       & get_lsc_credentials_response_lsc_credential_comment
       & get_lsc_credentials_response_lsc_credential_in_use
       & get_lsc_credentials_response_lsc_credential_type
       & get_lsc_credentials_response_lsc_credential_targets
       & get_lsc_credentials_response_lsc_credential_public_key?
       & get_lsc_credentials_response_lsc_credential_package?
     }

# The name of the LSC credential.
get_lsc_credentials_response_lsc_credential_name
 = element name
     {
       name
     }

# The username of the LSC credential.
get_lsc_credentials_response_lsc_credential_login
 = element login
     {
       name
     }

# The comment on the LSC credential.
get_lsc_credentials_response_lsc_credential_comment
 = element comment
     {
       text
     }

# Whether any targets are using the LSC credential.
get_lsc_credentials_response_lsc_credential_in_use
 = element in_use
     {
       boolean
     }

# The type of the LSC credential.
get_lsc_credentials_response_lsc_credential_type
 = element type
     {
       xsd:token { pattern = "gen|pass" }
     }

# All targets using this LSC credential.
get_lsc_credentials_response_lsc_credential_targets
 = element targets
     {
       ""
       & get_lsc_credentials_response_lsc_credential_targets_target*
     }

get_lsc_credentials_response_lsc_credential_targets_target
 = element target
     {
       ""
       & attribute id { uuid }
       & get_lsc_credentials_response_lsc_credential_targets_target_name
     }

# The name of the target.
get_lsc_credentials_response_lsc_credential_targets_target_name
 = element name
     {
       name
     }

get_lsc_credentials_response_lsc_credential_public_key
 = element public_key
     {
       text
     }

get_lsc_credentials_response_lsc_credential_package
 = element package
     {
       base64
       & attribute format { xsd:token { pattern = "rpm|deb|exe" } }
     }

## Response to get_notes

get_notes_response
 = element get_notes_response
     {
       ""
       & attribute status { status }
       & attribute status_text { text }
       & get_notes_response_note*
     }

get_notes_response_note
 = element note
     {
       ""
       & get_notes_response_note_nvt
       & get_notes_response_note_text
       & get_notes_response_note_orphan
       & ( get_notes_response_note_creation_time
           & get_notes_response_note_modification_time
           & get_notes_response_note_hosts
           & get_notes_response_note_port
           & get_notes_response_note_threat
           & get_notes_response_note_task
           & get_notes_response_note_result? )?
     }

get_notes_response_note_nvt
 = element nvt
     {
       ""
       & attribute oid { oid }
       & get_notes_response_note_nvt_name
     }

get_notes_response_note_nvt_name
 = element name
     {
       name
     }

# The text of the note.
get_notes_response_note_text
 = element text
     {
       text
       & attribute excerpt { boolean }
     }

# Whether the note is an orphan.
get_notes_response_note_orphan
 = element orphan
     {
       boolean
     }

get_notes_response_note_creation_time
 = element creation_time
     {
       ctime
     }

get_notes_response_note_modification_time
 = element modification_time
     {
       ctime
     }

# A textual list of hosts.
get_notes_response_note_hosts
 = element hosts
     {
       text
     }

# Port to which note applies.
get_notes_response_note_port
 = element port
     {
       text
     }

# Threat level to which note applies.
get_notes_response_note_threat
 = element threat
     {
       threat
     }

# Task to which note applies.
get_notes_response_note_task
 = element task
     {
       ""
       & attribute id { uuid }
     }

# Result to which note applies.
get_notes_response_note_result
 = element result
     {
       ""
       & attribute id { uuid }
       & get_notes_response_note_result_subnet
       & get_notes_response_note_result_host
       & get_notes_response_note_result_port
       & get_notes_response_note_result_nvt
       & get_notes_response_note_result_threat
       & get_notes_response_note_result_description
     }

get_notes_response_note_result_subnet
 = element subnet
     {
       text
     }

get_notes_response_note_result_host
 = element host
     {
       text
     }

get_notes_response_note_result_port
 = element port
     {
       text
     }

get_notes_response_note_result_nvt
 = element nvt
     {
       ""
       & attribute oid { oid }
       & get_notes_response_note_result_nvt_name
       & get_notes_response_note_result_nvt_cvss_base
       & get_notes_response_note_result_nvt_risk_factor
     }

get_notes_response_note_result_nvt_name
 = element name
     {
       name
     }

get_notes_response_note_result_nvt_cvss_base
 = element cvss_base
     {
       text
     }

get_notes_response_note_result_nvt_risk_factor
 = element risk_factor
     {
       text
     }

get_notes_response_note_result_threat
 = element threat
     {
       threat
     }

get_notes_response_note_result_description
 = element description
     {
       text
     }

## Response to get_nvts

get_nvts_response
 = element get_nvts_response
     {
       ""
       & attribute status { status }
       & attribute status_text { text }
       & get_nvts_response_nvt
     }

get_nvts_response_nvt
 = element nvt
     {
       ""
       & attribute id { uuid }
       & get_nvts_response_nvt_name
       & get_nvts_response_nvt_checksum
       & ( get_nvts_response_nvt_category
           & get_nvts_response_nvt_copyright
           & get_nvts_response_nvt_description
           & get_nvts_response_nvt_summary
           & get_nvts_response_nvt_family
           & get_nvts_response_nvt_version
           & get_nvts_response_nvt_cvss_base
           & get_nvts_response_nvt_risk_factor
           & get_nvts_response_nvt_cve_id
           & get_nvts_response_nvt_bugtraq_id
           & get_nvts_response_nvt_xrefs
           & get_nvts_response_nvt_fingerprints
           & get_nvts_response_nvt_tags
           & get_nvts_response_nvt_preference_count?
           & get_nvts_response_nvt_timeout?
           & get_nvts_response_nvt_preferences? )?
     }

# The name of the NVT.
get_nvts_response_nvt_name
 = element name
     {
       name
     }

get_nvts_response_nvt_category
 = element category
     {
       text
     }

get_nvts_response_nvt_copyright
 = element copyright
     {
       text
     }

get_nvts_response_nvt_description
 = element description
     {
       text
     }

get_nvts_response_nvt_summary
 = element summary
     {
       text
     }

get_nvts_response_nvt_family
 = element family
     {
       text
     }

get_nvts_response_nvt_version
 = element version
     {
       text
     }

get_nvts_response_nvt_cvss_base
 = element cvss_base
     {
       text
     }

get_nvts_response_nvt_risk_factor
 = element risk_factor
     {
       text
     }

get_nvts_response_nvt_cve_id
 = element cve_id
     {
       text
     }

get_nvts_response_nvt_bugtraq_id
 = element bugtraq_id
     {
       text
     }

get_nvts_response_nvt_xrefs
 = element xrefs
     {
       text
     }

get_nvts_response_nvt_fingerprints
 = element fingerprints
     {
       text
     }

get_nvts_response_nvt_tags
 = element tags
     {
       text
     }

get_nvts_response_nvt_preference_count
 = element preference_count
     {
       text
     }

get_nvts_response_nvt_timeout
 = element timeout
     {
       text
     }

get_nvts_response_nvt_checksum
 = element checksum
     {
       text
       & get_nvts_response_nvt_checksum_algorithm
     }

get_nvts_response_nvt_checksum_algorithm
 = element algorithm
     {
       text
     }

get_nvts_response_nvt_preferences
 = element preferences
     {
       text
       & get_nvts_response_nvt_preferences_timeout
       & get_nvts_response_nvt_preferences_preference*
     }

get_nvts_response_nvt_preferences_timeout
 = element timeout
     {
       text
     }

get_nvts_response_nvt_preferences_preference
 = element preference
     {
       ""
       & get_nvts_response_nvt_preferences_preference_nvt
       & get_nvts_response_nvt_preferences_preference_name
       & get_nvts_response_nvt_preferences_preference_type
       & get_nvts_response_nvt_preferences_preference_value
     }

get_nvts_response_nvt_preferences_preference_nvt
 = element nvt
     {
       oid
     }

get_nvts_response_nvt_preferences_preference_name
 = element name
     {
       text
     }

get_nvts_response_nvt_preferences_preference_type
 = element type
     {
       text
     }

get_nvts_response_nvt_preferences_preference_value
 = element value
     {
       text
     }

## Response to get_nvt_families

get_nvt_families_response
 = element get_nvt_families_response
     {
       ""
       & attribute status { status }
       & attribute status_text { text }
       & get_nvt_families_response_families
     }

get_nvt_families_response_families
 = element families
     {
       ""
       & get_nvt_families_response_families_family*
     }

get_nvt_families_response_families_family
 = element family
     {
       ""
       & get_nvt_families_response_families_family_name
       & get_nvt_families_response_families_family_max_nvt_count
     }

# The name of the family.
get_nvt_families_response_families_family_name
 = element name
     {
       name
     }

# The number of NVTs in the family.
get_nvt_families_response_families_family_max_nvt_count
 = element max_nvt_count
     {
       integer
     }

## Response to get_nvt_feed_checksum

get_nvt_feed_checksum_response
 = element get_nvt_feed_checksum_response
     {
       ""
       & attribute status { status }
       & attribute status_text { text }
       & get_nvt_feed_checksum_response_checksum
     }

get_nvt_feed_checksum_response_checksum
 = element checksum
     {
       base64
       & attribute algorithm { text }
     }

## Response to get_overrides

get_overrides_response
 = element get_overrides_response
     {
       ""
       & attribute status { status }
       & attribute status_text { text }
       & get_overrides_response_override*
     }

get_overrides_response_override
 = element override
     {
       ""
       & get_overrides_response_override_nvt
       & get_overrides_response_override_text
       & get_overrides_response_override_threat
       & get_overrides_response_override_new_threat
       & get_overrides_response_override_orphan
       & ( get_overrides_response_override_creation_time
           & get_overrides_response_override_modification_time
           & get_overrides_response_override_hosts
           & get_overrides_response_override_port
           & get_overrides_response_override_task
           & get_overrides_response_override_result? )?
     }

get_overrides_response_override_nvt
 = element nvt
     {
       ""
       & attribute oid { oid }
       & get_overrides_response_override_nvt_name
     }

get_overrides_response_override_nvt_name
 = element name
     {
       name
     }

# The text of the override.
get_overrides_response_override_text
 = element text
     {
       text
       & attribute excerpt { boolean }
     }

# Threat level to which override applies.
get_overrides_response_override_threat
 = element threat
     {
       threat
     }

# New threat for result.
get_overrides_response_override_new_threat
 = element new_threat
     {
       threat
     }

# Whether the override is an orphan.
get_overrides_response_override_orphan
 = element orphan
     {
       boolean
     }

get_overrides_response_override_creation_time
 = element creation_time
     {
       ctime
     }

get_overrides_response_override_modification_time
 = element modification_time
     {
       ctime
     }

# A textual list of hosts.
get_overrides_response_override_hosts
 = element hosts
     {
       text
     }

# Port to which override applies.
get_overrides_response_override_port
 = element port
     {
       text
     }

# Task to which override applies.
get_overrides_response_override_task
 = element task
     {
       ""
       & attribute id { uuid }
     }

# Result to which override applies.
get_overrides_response_override_result
 = element result
     {
       ""
       & attribute id { uuid }
       & get_overrides_response_override_result_subnet
       & get_overrides_response_override_result_host
       & get_overrides_response_override_result_port
       & get_overrides_response_override_result_nvt
       & get_overrides_response_override_result_threat
       & get_overrides_response_override_result_description
     }

get_overrides_response_override_result_subnet
 = element subnet
     {
       text
     }

get_overrides_response_override_result_host
 = element host
     {
       text
     }

get_overrides_response_override_result_port
 = element port
     {
       text
     }

get_overrides_response_override_result_nvt
 = element nvt
     {
       ""
       & attribute oid { oid }
       & get_overrides_response_override_result_nvt_name
       & get_overrides_response_override_result_nvt_cvss_base
       & get_overrides_response_override_result_nvt_risk_factor
     }

get_overrides_response_override_result_nvt_name
 = element name
     {
       name
     }

get_overrides_response_override_result_nvt_cvss_base
 = element cvss_base
     {
       text
     }

get_overrides_response_override_result_nvt_risk_factor
 = element risk_factor
     {
       text
     }

get_overrides_response_override_result_threat
 = element threat
     {
       threat
     }

get_overrides_response_override_result_description
 = element description
     {
       text
     }

## Response to get_preferences

get_preferences_response
 = element get_preferences_response
     {
       ""
       & attribute status { status }
       & attribute status_text { text }
       & get_preferences_response_preference*
     }

get_preferences_response_preference
 = element preference
     {
       ""
       & get_preferences_response_preference_nvt?
       & get_preferences_response_preference_name
       & get_preferences_response_preference_type?
       & get_preferences_response_preference_value
     }

# NVT to which preference applies.
get_preferences_response_preference_nvt
 = element nvt
     {
       ""
       & attribute oid { oid }
       & get_preferences_response_preference_nvt_name
     }

# The name of the NVT.
get_preferences_response_preference_nvt_name
 = element name
     {
       name
     }

# The name of the preference.
get_preferences_response_preference_name
 = element name
     {
       name
     }

# The type of preference.
get_preferences_response_preference_type
 = element type
     {
       text
     }

# The value of the preference.
get_preferences_response_preference_value
 = element value
     {
       text
     }

## Response to get_version

get_version_response
 = element get_version_response
     {
       ""
       & attribute status { status }
       & attribute status_text { text }
       & get_version_response_version
     }

get_version_response_version
 = element version
     {
       text
     }

## Response to help

help_response
 = element help_response
     {
       ""
       & attribute status { status }
       & attribute status_text { text }
     }

## Response to modify_config

modify_config_response
 = element modify_config_response
     {
       ""
       & attribute status { status }
       & attribute status_text { text }
     }

## Response to modify_note

modify_note_response
 = element modify_note_response
     {
       ""
       & attribute status { status }
       & attribute status_text { text }
     }

## Response to modify_override

modify_override_response
 = element modify_override_response
     {
       ""
       & attribute status { status }
       & attribute status_text { text }
     }

## Response to modify_report

modify_report_response
 = element modify_report_response
     {
       ""
       & attribute status { status }
       & attribute status_text { text }
     }

## Response to modify_task

modify_task_response
 = element modify_task_response
     {
       ""
       & attribute status { status }
       & attribute status_text { text }
     }

## Response to pause_task

pause_task_response
 = element pause_task_response
     {
       ""
       & attribute status { status }
       & attribute status_text { text }
     }

## Response to resume_or_start_task

resume_or_start_task_response
 = element resume_or_start_task_response
     {
       ""
       & attribute status { status }
       & attribute status_text { text }
     }

## Response to resume_paused_task

resume_paused_task_response
 = element resume_paused_task_response
     {
       ""
       & attribute status { status }
       & attribute status_text { text }
     }

## Response to resume_stopped_task

resume_stopped_task_response
 = element resume_stopped_task_response
     {
       ""
       & attribute status { status }
       & attribute status_text { text }
     }

## Response to start_task

start_task_response
 = element start_task_response
     {
       ""
       & attribute status { status }
       & attribute status_text { text }
     }

## Response to stop_task

stop_task_response
 = element stop_task_response
     {
       ""
       & attribute status { status }
       & attribute status_text { text }
     }

## Response to test_escalator

test_escalator_response
 = element test_escalator_response
     {
       ""
       & attribute status { status }
       & attribute status_text { text }
     }

GREENBONE-VULNERABILITY-MANAGER POSTGRESQL BACKEND HOWTO
========================================================

Please note: Everything should work using Postgres, but this backend has
seen little testing so far.  The reference system used for development is
Debian GNU/Linux 'Jessie' 8.

1 Install Postgres.

	(Debian: postgresql, postgresql-contrib, postgresql-server-dev-9.4).

2 Run cmake with this additional parameter:

	-DBACKEND=POSTGRESQL

3 Build Manager as usual.

4 Setup Postgres User and DB (/usr/share/doc/postgresql-common/README.Debian.gz)

	sudo -u postgres sh
	createuser -DRS mattm       # mattm is your OS login name
	createdb -O mattm gvmd

5 Setup DB extensions and permission.

	sudo -u postgres sh  # if you logged out after step 4
	psql gvmd
	create role dba with superuser noinherit;
	grant dba to mattm;
	create extension "uuid-ossp";

6 Make Postgres aware of the gvm libraries if not installed
  in a ld-aware directory. For example create file /etc/ld.so.conf.d/gvm.conf
  with appropriate path and then run ldconfig.

7 Run Manager as usual.

8 To run SQL on the database.

	psql gvmd


Migrating from SQLite to PostgreSQL
-----------------------------------

1 Run "gvm-migrate-to-postgres" into a clean newly created
  PostgreSQL database like described above.

  If you accidentally already rebuilt the database or for other reasons
  want to start from scratch, apply the dropping of all data as
  described below.  It is essentially important that you do not start
  Manager before the migration as it would create a fresh one and therefore
  prevent migration.

2 Run "greenbone-scapdata-sync".

3 Run "greenbone-certdata-sync".


Analyzing the size of the tables
--------------------------------

In case the database grows in size and you want to understand
which of the tables is responsible for it, there are two queries
to check table sizes:

Biggest relations:

SELECT nspname || '.' || relname AS "relation",
    pg_size_pretty(pg_relation_size(C.oid)) AS "size"
  FROM pg_class C
  LEFT JOIN pg_namespace N ON (N.oid = C.relnamespace)
  WHERE nspname NOT IN ('pg_catalog', 'information_schema')
  ORDER BY pg_relation_size(C.oid) DESC
  LIMIT 20;

Biggest tables:

SELECT nspname || '.' || relname AS "relation",
    pg_size_pretty(pg_total_relation_size(C.oid)) AS "total_size"
  FROM pg_class C
  LEFT JOIN pg_namespace N ON (N.oid = C.relnamespace)
  WHERE nspname NOT IN ('pg_catalog', 'information_schema')
    AND C.relkind <> 'i'
    AND nspname !~ '^pg_toast'
  ORDER BY pg_total_relation_size(C.oid) DESC
  LIMIT 20;

These queries were taken from https://wiki.postgresql.org/wiki/Disk_Usage


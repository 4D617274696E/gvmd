#!/bin/sh
#
# OpenVAS
# $Id$
# Description: Synchronize with SCAP data feed.
#
# Authors:
# Henri Doreau <henri.doreau@greenbone.net>
# Timo Pollmeier <timo.pollmeier@greenbone.net>
#
# Copyright:
# Copyright (C) 2011-2012 Greenbone Networks GmbH
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License version 2,
# or, at your option, any later version as published by the Free
# Software Foundation
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.

# configure SCAP_DIR where we will sync SCAP data
if [ -z "$SCAP_DIR" ]; then
  OPENVASSD=`which openvassd`
  if [ -z "$OPENVASSD" ] ; then
    echo "[e] Error: openvassd is not in the path, could not determine SCAP directory."
    exit 1
  else
    # get the parent directory of the plugins
    SCAP_DIR=`openvassd -s | awk -F" = " '/^plugins_folder/ { print $2 }' | sed -s 's/\(^.*\)\/plugins/\1/'`
    # suffix it with "scap-data" which is our target (destination) directory
    SCAP_DIR="$SCAP_DIR/scap-data"
  fi
fi
SEC_DB="$SCAP_DIR/scap.db"

# Script and feed information which will be made available to user through
# command line options and automated tools.
SCRIPT_NAME="openvas-scapdata-sync"
VERSION=@OPENVASMD_VERSION@
SCAP_RES_DIR=@OPENVAS_SCAP_RES_DIR@
RESTRICTED=0

TIMESTAMP="$SCAP_DIR/timestamp"

if [ -z "$FEED_NAME" ] ; then
  FEED_NAME="OpenVAS SCAP Feed"
fi

if [ -z "$FEED_VENDOR" ] ; then
  FEED_VENDOR="The OpenVAS Project"
fi

if [ -z "$FEED_HOME" ] ; then
  FEED_HOME="http://www.openvas.org/"
fi

# The URL of the plugin feed
if [ -z "$OV_RSYNC_FEED" ]; then
  OV_RSYNC_FEED=rsync://feed.openvas.org:/scap-data
  # An alternative syntax which might work if the above doesn't:
  # OV_RSYNC_FEED=rsync@feed.openvas.org::scap-data
fi

if [ -z "$OV_HTTP_FEED" ]; then
  OV_HTTP_FEED=http://www.openvas.org/openvas-scap-data-current.tar.bz2
fi

if [ -z "$TMPDIR" ]; then
  SYNC_TMP_DIR=/tmp
  # If we have mktemp, create a temporary dir (safer)
  if [ -n "`which mktemp`" ]; then
    SYNC_TMP_DIR=`mktemp -t -d openvas-scap-data-sync.XXXXXXXXXX` || { echo "ERROR: Cannot create temporary directory for file download" >&2; exit 1 ; }
    trap "rm -rf $SYNC_TMP_DIR" EXIT HUP INT TRAP TERM
  fi
else
  SYNC_TMP_DIR="$TMPDIR"
fi

do_help () {
  echo "$0: Sync SCAP data using different protocols"
  echo " --rsync		sync with rsync (default)"
  echo " --wget		sync with wget"
  echo " --curl		sync with curl"
  echo " --check		just checksum check"
  echo "OpenVAS administrator functions:"
  echo " --selftest	perform self-test"
  echo " --identify	display information"
  echo " --version	display version"
  echo " --describe	display current scap feed info"
  echo " --feedversion   display current scap feed version"
  echo " --dst-dir <dir>	SCAP destination directory"
  echo ""
  echo "Environment variables:"
  echo "SCAP_DIR		where to extract plugins (absolute path)"
  echo "OV_RSYNC_FEED	URL of rsync feed"
  echo "OV_HTTP_FEED	URL of http feed"
  echo "TMPDIR		temporary directory used to download the files"
  echo "Note that you can use standard ones as well (e.g. http_proxy) for wget/curl"
  echo ""
  exit 0
}

CMD_RSYNC=`which rsync`
CMD_WGET=`which wget`
CMD_CURL=`which curl`
CMD_SQLITE=`which sqlite3`
SQLITE="sqlite3 -noheader"
TMP_SCAP="$SYNC_TMP_DIR/openvas-feed-`date +%F`-$$.tar.bz2"

chk_system_tools () {
  echo "[i] Searching for required system tools (look for warnings/errors)..."

  if [ -z "$CMD_RSYNC" ]; then
    echo "[w] Warning: RSYNC not found";
  fi

  if [ -z "$CMD_WGET" ]; then
    echo "[w] Warning: wget not found";
  fi

  if [ -z "$CMD_CURL" ]; then
    echo "[w] Warning: curl not found";
  fi

  if [ -z "$CMD_SQLITE" ]; then
    echo "[e] Error: sqlite3 not found (required)";
    exit 1
  fi

  if [ -z "$CMD_RSYNC" -a -z "$CMD_WGET" -a -z "$CMD_CURL" ]; then
    SELFTEST_FAIL=1
  fi

  echo "[i] If you did not get any warnings, that means you have all tools required"
}

do_rsync () {
  if [ -z "$CMD_RSYNC" ]; then
    echo "[w] rsync not found!"
  else
    echo "[i] Using rsync: $CMD_RSYNC"
    echo "[i] Configured SCAP data rsync feed: $OV_RSYNC_FEED"
    mkdir -p "$SCAP_DIR"
    eval "$CMD_RSYNC -ltvrP \"$OV_RSYNC_FEED\" \"$SCAP_DIR\""
    if [ $? -ne 0 ] ; then
      echo "Error: rsync failed. Your SCAP data might be broken now."
      exit 1
    fi
  fi
}

do_wget () {
  if [ -z "$CMD_WGET" ]; then
    echo "[w] GNU wget not found!"
  else
    echo "[i] Using GNU wget: $CMD_WGET"
    echo "[i] Configured SCAP http feed: $OV_HTTP_FEED"
    echo "[i] Downloading to: $TMP_SCAP"
    mkdir -p "$SCAP_DIR" \
    && wget "$OV_HTTP_FEED" -O $TMP_SCAP \
    && cd "$SCAP_DIR" \
    && tar xvjf $TMP_SCAP \
    && rm -f $TMP_SCAP \
    && echo "[i] Download complete"
  fi
}

do_curl () {
  if [ -z "$CMD_CURL" ]; then
    echo "[w] curl not found!"
  else
    echo "[i] Using curl: $CMD_CURL"
    echo "[i] Configured SCAP http feed: $OV_HTTP_FEED"
    echo "[i] Downloading to: $TMP_SCAP"
    mkdir -p "$SCAP_DIR" \
    && curl "$OV_HTTP_FEED" -o $TMP_SCAP \
    && cd "$SCAP_DIR" \
    && tar xvjf $TMP_SCAP \
    && rm -f $TMP_SCAP \
    && echo "[i] Download complete"
  fi
}

do_self_test () {
  chk_system_tools
}

do_describe () {
  echo "This script synchronizes a SCAP collection with the '$FEED_NAME'."
  echo "The '$FEED_NAME' is provided by '$FEED_VENDOR'."
  echo "Online information about this feed: '$FEED_HOME'."

}

do_feedversion () {
  if [ -r $TIMESTAMP ] ; then
      echo `cat $TIMESTAMP`
  fi
}

show_intro () {
  echo "[i] This script synchronizes a SCAP data directory with the OpenVAS one."
  echo "[i] SCAP dir: $SCAP_DIR"
}

do_sync () {
  if [ -z "$CMD_RSYNC" ] ; then
    if [ -z "$CMD_WGET" ]; then
      echo "[w] GNU wget not found!"
      if [ -z "$CMD_CURL" ]; then
        echo "[w] curl not found!"
        echo -n "[e] no utility available in PATH environment variable to download plugins"
        exit 1
      else
        echo "[i] Will use curl"
        do_curl
      fi
    else
      echo "[i] Will use wget"
      do_wget
    fi
  else
    echo "[i] Will use rsync"
    do_rsync
  fi
}

reinit () {
  echo "[i] Major change in internal SCAP data structures."
  echo "[i] Reinitialization of database necessary."
  echo "[i] This update might take a while.."
  $SQLITE $SEC_DB < $SCAP_RES_DIR/db_init.sql
}

migrate_3 ()
{
  echo "[i] Database Version updated. Migrating to Version 3."
  echo "[i] Updating CPEs.."
  $SQLITE $SEC_DB "update cpes set modification_time = strftime('%s', modification_time), \
                                   creation_time = strftime('%s', creation_time);"
  echo "[i] Updating CVEs.."
  $SQLITE $SEC_DB "update cves set modification_time = strftime('%s', modification_time), \
                                   creation_time = strftime('%s', creation_time);"
  echo "[i] Migration done."
  $SQLITE $SEC_DB "update meta set value ='3' where name = 'database_version';"
}

migrate_4 ()
{
  echo "[i] Database Version updated. Migrating to Version 4."
  echo "[i] Updating Tables.."
  $SQLITE $SEC_DB "alter table cves add column vector;"
  $SQLITE $SEC_DB "alter table cves add column complexity;"
  $SQLITE $SEC_DB "alter table cves add column authentication;"
  $SQLITE $SEC_DB "alter table cves add column confidentiality_impact;"
  $SQLITE $SEC_DB "alter table cves add column integrity_impact;"
  $SQLITE $SEC_DB "alter table cves add column availability_impact;"
  $SQLITE $SEC_DB "alter table cves add column products;"

  for cvefile in `ls $SCAP_DIR/nvdcve-2.0-*.xml`
  do
      echo "[i] Adding CVSS information of $cvefile to SCAP DB.."
      xsltproc $SCAP_RES_DIR/migrate_db4.xsl $cvefile | $SQLITE $SEC_DB
  done

  echo "[i] Migration done."
  $SQLITE $SEC_DB "update meta set value ='4' where name = 'database_version';"
}


migrate_7 () {
  echo "[i] Database Version updated. Migrating to Version 7."
  echo "[i] Adding Tables.."

  $SQLITE $SEC_DB "DROP TABLE IF EXISTS ovaldefs; CREATE TABLE ovaldefs (id INTEGER PRIMARY KEY AUTOINCREMENT, uuid UNIQUE, name UNIQUE, comment, creation_time DATE, modification_time DATE, version INTEGER, deprecated BOOLEAN, def_class TEXT, title TEXT, description TEXT, xml_file TEXT); CREATE UNIQUE INDEX ovaldefs_idx ON ovaldefs (name);"
  
  $SQLITE $SEC_DB "update meta set value ='0' where name = 'last_update';"
  $SQLITE $SEC_DB "update meta set value ='7' where name = 'database_version';"
  
  echo "[i] Migration done."
}

check_db_version () {
  DB_VERSION=`$SQLITE $SEC_DB "select value from meta where name = 'database_version';" 2>/dev/null || echo 0`
  case "$DB_VERSION" in
    0) reinit;;
    1) reinit;;
    2) migrate_3
       migrate_4
       migrate_7;;
    3) migrate_4
       migrate_7;;
    4) migrate_7;;
    5) migrate_7;;
    6) migrate_7;;
  esac
}

update_sec_db () {
  if [ ! -f $SEC_DB ]
  then
    echo "[i] Initializing scap database"
    $SQLITE $SEC_DB < $SCAP_RES_DIR/db_init.sql
    DB_LASTUPDATE=0
    CVE_REFDATE=0
    OVAL_REFDATE=0
  else
    check_db_version
    CVE_REFDATE=`$SQLITE $SEC_DB "select max(modification_time) from cves;" | sed -e 's/T.*//' | tr -d "-"`
    OVAL_REFDATE=`$SQLITE $SEC_DB "SELECT max(modification_time) FROM ovaldefs;"`
  fi

  DB_LASTUPDATE=`$SQLITE $SEC_DB "select value from meta where name = 'last_update';"`

  if [ -z "$CVE_REFDATE" ]
  then
    CVE_REFDATE=0
  fi
  
  if [ -z "$OVAL_REFDATE" ]
  then
    OVAL_REFDATE=0
  fi

  if [ -z "$DB_LASTUPDATE" ]
  then
    # Happens when initial sync was aborted
    echo "Error: Inconsistent data. Resetting SCAP database."
    rm -f $SEC_DB
    $SQLITE $SEC_DB < $SCAP_RES_DIR/db_init.sql
    CVE_REFDATE=0
    OVAL_REFDATE=0
    DB_LASTUPDATE=0
  fi

  CPEBASE="$SCAP_DIR/official-cpe-dictionary_v2.2.xml"
  if [ -e $CPEBASE ]
  then
    if [ `stat -c "%Y" $CPEBASE | cut -d " " -f 1 | tr -d "-"` -ge $DB_LASTUPDATE ]
    then
      echo "[i] Updating CPEs"
      sed 's/&/&amp;/g' $CPEBASE | \
        xsltproc --stringparam refdate $CVE_REFDATE $SCAP_RES_DIR/cpe_youngerthan.xsl - | \
        xsltproc $SCAP_RES_DIR/cpe_update.xsl - | \
        $SQLITE $SEC_DB
    else
      echo "[i] Skipping CPEs, file is older than last revision"
    fi
  else  
    echo "[w] No CPE dictionary found in $SCAP_DIR"
  fi


  xmlcount=$(ls $SCAP_DIR/nvdcve-2.0-*.xml 2> /dev/null | wc -l)
  if [ $xmlcount -ne 0 ]
  then
    for cvefile in `ls $SCAP_DIR/nvdcve-2.0-*.xml`
    do
      if [ `stat -c "%Y" $cvefile | cut -d " " -f 1 | tr -d "-"` -ge $DB_LASTUPDATE ]
      then
        echo "[i] Updating $cvefile"
        xsltproc --stringparam refdate $CVE_REFDATE $SCAP_RES_DIR/cve_youngerthan.xsl $cvefile | \
          xsltproc $SCAP_RES_DIR/cve_update.xsl - | \
          $SQLITE $SEC_DB
      else
        echo "[i] Skipping $cvefile, file is older than last revision"
      fi
    done
  else 
    echo "[w] No CVEs found in $SCAP_DIR"
  fi
  
  echo "[i] Updating OVAL data"
  xmlcount=$(ls $SCAP_DIR/oval/*.xml 2> /dev/null | wc -l)
  if [ $xmlcount -ne 0 ]
  then
    for ovalfile in `ls $SCAP_DIR/oval/*.xml`
    do
      if [ `stat -c "%Y" $ovalfile | cut -d " " -f 1 | tr -d "-"` -ge $DB_LASTUPDATE ]
      then
        sqlquery=`xsltproc $SCAP_RES_DIR/oval_timestamp.xsl $ovalfile`
        oval_timestamp=`$SQLITE $SEC_DB "$sqlquery"`
      
        if [ $oval_timestamp -ge $OVAL_REFDATE ]
        then
          echo "[i] Updating $ovalfile"
          xsltproc --stringparam filename "${ovalfile##$SCAP_DIR/}" $SCAP_RES_DIR/oval_update.xsl $ovalfile | \
          $SQLITE $SEC_DB
        else
          echo "[i] Skipping $ovalfile, file has older timestamp than latest OVAL definition in database."
        fi
      else
        echo "[i] Skipping $ovalfile, file is older than last revision."
      fi
    done
  else
    echo "[w] No XML files found in $SCAP_DIR/oval/."
  fi
  
  $SQLITE $SEC_DB "update meta set value ='`date +%s`' where name = 'last_update';"
}

if [ -n "$1" ]; then
  while test $# -gt 0; do
    case "$1" in
      --help)
        do_help
        exit 0
        ;;
      --rsync)
        do_rsync
        exit 0
        ;;
      --wget)
        do_wget
        exit 0
        ;;
      --curl)
        do_curl
        exit 0
        ;;
      --check)
        exit 0
        ;;
      --version)
        echo $VERSION
        exit 0
        ;;
      --identify)
        echo "SCAPSYNC|$SCRIPT_NAME|$VERSION|$FEED_NAME|$RESTRICTED|SCAPSYNC"
        exit 0
        ;;
      --selftest)
        SELFTEST_FAIL=0
        do_self_test
        exit $SELFTEST_FAIL
        ;;
      --describe)
        do_describe
        exit 0
        ;;
      --feedversion)
        do_feedversion
        exit 0
        ;;
      --nvt-dir)
        SCAP_DIR="$2"
        shift
        ;;
    esac
    shift
  done
fi

show_intro
do_sync
update_sec_db

exit 0
